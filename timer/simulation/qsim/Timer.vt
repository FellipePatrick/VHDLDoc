// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/21/2024 06:09:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Timer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Timer_vlg_sample_tst(
	clk,
	nRst,
	sampler_tx
);
input  clk;
input  nRst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or nRst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Timer_vlg_check_tst (
	segmentos_hora_d,
	segmentos_hora_u,
	segmentos_min_d,
	segmentos_min_u,
	segmentos_seg_d,
	segmentos_seg_u,
	sampler_rx
);
input [6:0] segmentos_hora_d;
input [6:0] segmentos_hora_u;
input [6:0] segmentos_min_d;
input [6:0] segmentos_min_u;
input [6:0] segmentos_seg_d;
input [6:0] segmentos_seg_u;
input sampler_rx;

reg [6:0] segmentos_hora_d_expected;
reg [6:0] segmentos_hora_u_expected;
reg [6:0] segmentos_min_d_expected;
reg [6:0] segmentos_min_u_expected;
reg [6:0] segmentos_seg_d_expected;
reg [6:0] segmentos_seg_u_expected;

reg [6:0] segmentos_hora_d_prev;
reg [6:0] segmentos_hora_u_prev;
reg [6:0] segmentos_min_d_prev;
reg [6:0] segmentos_min_u_prev;
reg [6:0] segmentos_seg_d_prev;
reg [6:0] segmentos_seg_u_prev;

reg [6:0] segmentos_hora_d_expected_prev;
reg [6:0] segmentos_hora_u_expected_prev;
reg [6:0] segmentos_min_d_expected_prev;
reg [6:0] segmentos_min_u_expected_prev;
reg [6:0] segmentos_seg_d_expected_prev;
reg [6:0] segmentos_seg_u_expected_prev;

reg [6:0] last_segmentos_hora_d_exp;
reg [6:0] last_segmentos_hora_u_exp;
reg [6:0] last_segmentos_min_d_exp;
reg [6:0] last_segmentos_min_u_exp;
reg [6:0] last_segmentos_seg_d_exp;
reg [6:0] last_segmentos_seg_u_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	segmentos_hora_d_prev = segmentos_hora_d;
	segmentos_hora_u_prev = segmentos_hora_u;
	segmentos_min_d_prev = segmentos_min_d;
	segmentos_min_u_prev = segmentos_min_u;
	segmentos_seg_d_prev = segmentos_seg_d;
	segmentos_seg_u_prev = segmentos_seg_u;
end

// update expected /o prevs

always @(trigger)
begin
	segmentos_hora_d_expected_prev = segmentos_hora_d_expected;
	segmentos_hora_u_expected_prev = segmentos_hora_u_expected;
	segmentos_min_d_expected_prev = segmentos_min_d_expected;
	segmentos_min_u_expected_prev = segmentos_min_u_expected;
	segmentos_seg_d_expected_prev = segmentos_seg_d_expected;
	segmentos_seg_u_expected_prev = segmentos_seg_u_expected;
end


// expected segmentos_hora_d[ 6 ]
initial
begin
	segmentos_hora_d_expected[6] = 1'bX;
end 
// expected segmentos_hora_d[ 5 ]
initial
begin
	segmentos_hora_d_expected[5] = 1'bX;
end 
// expected segmentos_hora_d[ 4 ]
initial
begin
	segmentos_hora_d_expected[4] = 1'bX;
end 
// expected segmentos_hora_d[ 3 ]
initial
begin
	segmentos_hora_d_expected[3] = 1'bX;
end 
// expected segmentos_hora_d[ 2 ]
initial
begin
	segmentos_hora_d_expected[2] = 1'bX;
end 
// expected segmentos_hora_d[ 1 ]
initial
begin
	segmentos_hora_d_expected[1] = 1'bX;
end 
// expected segmentos_hora_d[ 0 ]
initial
begin
	segmentos_hora_d_expected[0] = 1'bX;
end 
// expected segmentos_hora_u[ 6 ]
initial
begin
	segmentos_hora_u_expected[6] = 1'bX;
end 
// expected segmentos_hora_u[ 5 ]
initial
begin
	segmentos_hora_u_expected[5] = 1'bX;
end 
// expected segmentos_hora_u[ 4 ]
initial
begin
	segmentos_hora_u_expected[4] = 1'bX;
end 
// expected segmentos_hora_u[ 3 ]
initial
begin
	segmentos_hora_u_expected[3] = 1'bX;
end 
// expected segmentos_hora_u[ 2 ]
initial
begin
	segmentos_hora_u_expected[2] = 1'bX;
end 
// expected segmentos_hora_u[ 1 ]
initial
begin
	segmentos_hora_u_expected[1] = 1'bX;
end 
// expected segmentos_hora_u[ 0 ]
initial
begin
	segmentos_hora_u_expected[0] = 1'bX;
end 
// expected segmentos_min_d[ 6 ]
initial
begin
	segmentos_min_d_expected[6] = 1'bX;
end 
// expected segmentos_min_d[ 5 ]
initial
begin
	segmentos_min_d_expected[5] = 1'bX;
end 
// expected segmentos_min_d[ 4 ]
initial
begin
	segmentos_min_d_expected[4] = 1'bX;
end 
// expected segmentos_min_d[ 3 ]
initial
begin
	segmentos_min_d_expected[3] = 1'bX;
end 
// expected segmentos_min_d[ 2 ]
initial
begin
	segmentos_min_d_expected[2] = 1'bX;
end 
// expected segmentos_min_d[ 1 ]
initial
begin
	segmentos_min_d_expected[1] = 1'bX;
end 
// expected segmentos_min_d[ 0 ]
initial
begin
	segmentos_min_d_expected[0] = 1'bX;
end 
// expected segmentos_min_u[ 6 ]
initial
begin
	segmentos_min_u_expected[6] = 1'bX;
end 
// expected segmentos_min_u[ 5 ]
initial
begin
	segmentos_min_u_expected[5] = 1'bX;
end 
// expected segmentos_min_u[ 4 ]
initial
begin
	segmentos_min_u_expected[4] = 1'bX;
end 
// expected segmentos_min_u[ 3 ]
initial
begin
	segmentos_min_u_expected[3] = 1'bX;
end 
// expected segmentos_min_u[ 2 ]
initial
begin
	segmentos_min_u_expected[2] = 1'bX;
end 
// expected segmentos_min_u[ 1 ]
initial
begin
	segmentos_min_u_expected[1] = 1'bX;
end 
// expected segmentos_min_u[ 0 ]
initial
begin
	segmentos_min_u_expected[0] = 1'bX;
end 
// expected segmentos_seg_d[ 6 ]
initial
begin
	segmentos_seg_d_expected[6] = 1'bX;
end 
// expected segmentos_seg_d[ 5 ]
initial
begin
	segmentos_seg_d_expected[5] = 1'bX;
end 
// expected segmentos_seg_d[ 4 ]
initial
begin
	segmentos_seg_d_expected[4] = 1'bX;
end 
// expected segmentos_seg_d[ 3 ]
initial
begin
	segmentos_seg_d_expected[3] = 1'bX;
end 
// expected segmentos_seg_d[ 2 ]
initial
begin
	segmentos_seg_d_expected[2] = 1'bX;
end 
// expected segmentos_seg_d[ 1 ]
initial
begin
	segmentos_seg_d_expected[1] = 1'bX;
end 
// expected segmentos_seg_d[ 0 ]
initial
begin
	segmentos_seg_d_expected[0] = 1'bX;
end 
// expected segmentos_seg_u[ 6 ]
initial
begin
	segmentos_seg_u_expected[6] = 1'bX;
end 
// expected segmentos_seg_u[ 5 ]
initial
begin
	segmentos_seg_u_expected[5] = 1'bX;
end 
// expected segmentos_seg_u[ 4 ]
initial
begin
	segmentos_seg_u_expected[4] = 1'bX;
end 
// expected segmentos_seg_u[ 3 ]
initial
begin
	segmentos_seg_u_expected[3] = 1'bX;
end 
// expected segmentos_seg_u[ 2 ]
initial
begin
	segmentos_seg_u_expected[2] = 1'bX;
end 
// expected segmentos_seg_u[ 1 ]
initial
begin
	segmentos_seg_u_expected[1] = 1'bX;
end 
// expected segmentos_seg_u[ 0 ]
initial
begin
	segmentos_seg_u_expected[0] = 1'bX;
end 
// generate trigger
always @(segmentos_hora_d_expected or segmentos_hora_d or segmentos_hora_u_expected or segmentos_hora_u or segmentos_min_d_expected or segmentos_min_d or segmentos_min_u_expected or segmentos_min_u or segmentos_seg_d_expected or segmentos_seg_d or segmentos_seg_u_expected or segmentos_seg_u)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected segmentos_hora_d = %b | expected segmentos_hora_u = %b | expected segmentos_min_d = %b | expected segmentos_min_u = %b | expected segmentos_seg_d = %b | expected segmentos_seg_u = %b | ",segmentos_hora_d_expected_prev,segmentos_hora_u_expected_prev,segmentos_min_d_expected_prev,segmentos_min_u_expected_prev,segmentos_seg_d_expected_prev,segmentos_seg_u_expected_prev);
	$display("| real segmentos_hora_d = %b | real segmentos_hora_u = %b | real segmentos_min_d = %b | real segmentos_min_u = %b | real segmentos_seg_d = %b | real segmentos_seg_u = %b | ",segmentos_hora_d_prev,segmentos_hora_u_prev,segmentos_min_d_prev,segmentos_min_u_prev,segmentos_seg_d_prev,segmentos_seg_u_prev);
`endif
	if (
		( segmentos_hora_d_expected_prev[0] !== 1'bx ) && ( segmentos_hora_d_prev[0] !== segmentos_hora_d_expected_prev[0] )
		&& ((segmentos_hora_d_expected_prev[0] !== last_segmentos_hora_d_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_d_expected_prev);
		$display ("     Real value = %b", segmentos_hora_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmentos_hora_d_exp[0] = segmentos_hora_d_expected_prev[0];
	end
	if (
		( segmentos_hora_d_expected_prev[1] !== 1'bx ) && ( segmentos_hora_d_prev[1] !== segmentos_hora_d_expected_prev[1] )
		&& ((segmentos_hora_d_expected_prev[1] !== last_segmentos_hora_d_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_d_expected_prev);
		$display ("     Real value = %b", segmentos_hora_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmentos_hora_d_exp[1] = segmentos_hora_d_expected_prev[1];
	end
	if (
		( segmentos_hora_d_expected_prev[2] !== 1'bx ) && ( segmentos_hora_d_prev[2] !== segmentos_hora_d_expected_prev[2] )
		&& ((segmentos_hora_d_expected_prev[2] !== last_segmentos_hora_d_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_d_expected_prev);
		$display ("     Real value = %b", segmentos_hora_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmentos_hora_d_exp[2] = segmentos_hora_d_expected_prev[2];
	end
	if (
		( segmentos_hora_d_expected_prev[3] !== 1'bx ) && ( segmentos_hora_d_prev[3] !== segmentos_hora_d_expected_prev[3] )
		&& ((segmentos_hora_d_expected_prev[3] !== last_segmentos_hora_d_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_d_expected_prev);
		$display ("     Real value = %b", segmentos_hora_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmentos_hora_d_exp[3] = segmentos_hora_d_expected_prev[3];
	end
	if (
		( segmentos_hora_d_expected_prev[4] !== 1'bx ) && ( segmentos_hora_d_prev[4] !== segmentos_hora_d_expected_prev[4] )
		&& ((segmentos_hora_d_expected_prev[4] !== last_segmentos_hora_d_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_d[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_d_expected_prev);
		$display ("     Real value = %b", segmentos_hora_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmentos_hora_d_exp[4] = segmentos_hora_d_expected_prev[4];
	end
	if (
		( segmentos_hora_d_expected_prev[5] !== 1'bx ) && ( segmentos_hora_d_prev[5] !== segmentos_hora_d_expected_prev[5] )
		&& ((segmentos_hora_d_expected_prev[5] !== last_segmentos_hora_d_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_d[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_d_expected_prev);
		$display ("     Real value = %b", segmentos_hora_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmentos_hora_d_exp[5] = segmentos_hora_d_expected_prev[5];
	end
	if (
		( segmentos_hora_d_expected_prev[6] !== 1'bx ) && ( segmentos_hora_d_prev[6] !== segmentos_hora_d_expected_prev[6] )
		&& ((segmentos_hora_d_expected_prev[6] !== last_segmentos_hora_d_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_d[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_d_expected_prev);
		$display ("     Real value = %b", segmentos_hora_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_segmentos_hora_d_exp[6] = segmentos_hora_d_expected_prev[6];
	end
	if (
		( segmentos_hora_u_expected_prev[0] !== 1'bx ) && ( segmentos_hora_u_prev[0] !== segmentos_hora_u_expected_prev[0] )
		&& ((segmentos_hora_u_expected_prev[0] !== last_segmentos_hora_u_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_u[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_u_expected_prev);
		$display ("     Real value = %b", segmentos_hora_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_hora_u_exp[0] = segmentos_hora_u_expected_prev[0];
	end
	if (
		( segmentos_hora_u_expected_prev[1] !== 1'bx ) && ( segmentos_hora_u_prev[1] !== segmentos_hora_u_expected_prev[1] )
		&& ((segmentos_hora_u_expected_prev[1] !== last_segmentos_hora_u_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_u[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_u_expected_prev);
		$display ("     Real value = %b", segmentos_hora_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_hora_u_exp[1] = segmentos_hora_u_expected_prev[1];
	end
	if (
		( segmentos_hora_u_expected_prev[2] !== 1'bx ) && ( segmentos_hora_u_prev[2] !== segmentos_hora_u_expected_prev[2] )
		&& ((segmentos_hora_u_expected_prev[2] !== last_segmentos_hora_u_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_u[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_u_expected_prev);
		$display ("     Real value = %b", segmentos_hora_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_hora_u_exp[2] = segmentos_hora_u_expected_prev[2];
	end
	if (
		( segmentos_hora_u_expected_prev[3] !== 1'bx ) && ( segmentos_hora_u_prev[3] !== segmentos_hora_u_expected_prev[3] )
		&& ((segmentos_hora_u_expected_prev[3] !== last_segmentos_hora_u_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_u[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_u_expected_prev);
		$display ("     Real value = %b", segmentos_hora_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_hora_u_exp[3] = segmentos_hora_u_expected_prev[3];
	end
	if (
		( segmentos_hora_u_expected_prev[4] !== 1'bx ) && ( segmentos_hora_u_prev[4] !== segmentos_hora_u_expected_prev[4] )
		&& ((segmentos_hora_u_expected_prev[4] !== last_segmentos_hora_u_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_u[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_u_expected_prev);
		$display ("     Real value = %b", segmentos_hora_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_hora_u_exp[4] = segmentos_hora_u_expected_prev[4];
	end
	if (
		( segmentos_hora_u_expected_prev[5] !== 1'bx ) && ( segmentos_hora_u_prev[5] !== segmentos_hora_u_expected_prev[5] )
		&& ((segmentos_hora_u_expected_prev[5] !== last_segmentos_hora_u_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_u[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_u_expected_prev);
		$display ("     Real value = %b", segmentos_hora_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_hora_u_exp[5] = segmentos_hora_u_expected_prev[5];
	end
	if (
		( segmentos_hora_u_expected_prev[6] !== 1'bx ) && ( segmentos_hora_u_prev[6] !== segmentos_hora_u_expected_prev[6] )
		&& ((segmentos_hora_u_expected_prev[6] !== last_segmentos_hora_u_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_hora_u[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_hora_u_expected_prev);
		$display ("     Real value = %b", segmentos_hora_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_hora_u_exp[6] = segmentos_hora_u_expected_prev[6];
	end
	if (
		( segmentos_min_d_expected_prev[0] !== 1'bx ) && ( segmentos_min_d_prev[0] !== segmentos_min_d_expected_prev[0] )
		&& ((segmentos_min_d_expected_prev[0] !== last_segmentos_min_d_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_d_expected_prev);
		$display ("     Real value = %b", segmentos_min_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_min_d_exp[0] = segmentos_min_d_expected_prev[0];
	end
	if (
		( segmentos_min_d_expected_prev[1] !== 1'bx ) && ( segmentos_min_d_prev[1] !== segmentos_min_d_expected_prev[1] )
		&& ((segmentos_min_d_expected_prev[1] !== last_segmentos_min_d_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_d_expected_prev);
		$display ("     Real value = %b", segmentos_min_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_min_d_exp[1] = segmentos_min_d_expected_prev[1];
	end
	if (
		( segmentos_min_d_expected_prev[2] !== 1'bx ) && ( segmentos_min_d_prev[2] !== segmentos_min_d_expected_prev[2] )
		&& ((segmentos_min_d_expected_prev[2] !== last_segmentos_min_d_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_d_expected_prev);
		$display ("     Real value = %b", segmentos_min_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_min_d_exp[2] = segmentos_min_d_expected_prev[2];
	end
	if (
		( segmentos_min_d_expected_prev[3] !== 1'bx ) && ( segmentos_min_d_prev[3] !== segmentos_min_d_expected_prev[3] )
		&& ((segmentos_min_d_expected_prev[3] !== last_segmentos_min_d_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_d_expected_prev);
		$display ("     Real value = %b", segmentos_min_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_min_d_exp[3] = segmentos_min_d_expected_prev[3];
	end
	if (
		( segmentos_min_d_expected_prev[4] !== 1'bx ) && ( segmentos_min_d_prev[4] !== segmentos_min_d_expected_prev[4] )
		&& ((segmentos_min_d_expected_prev[4] !== last_segmentos_min_d_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_d[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_d_expected_prev);
		$display ("     Real value = %b", segmentos_min_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_min_d_exp[4] = segmentos_min_d_expected_prev[4];
	end
	if (
		( segmentos_min_d_expected_prev[5] !== 1'bx ) && ( segmentos_min_d_prev[5] !== segmentos_min_d_expected_prev[5] )
		&& ((segmentos_min_d_expected_prev[5] !== last_segmentos_min_d_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_d[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_d_expected_prev);
		$display ("     Real value = %b", segmentos_min_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_min_d_exp[5] = segmentos_min_d_expected_prev[5];
	end
	if (
		( segmentos_min_d_expected_prev[6] !== 1'bx ) && ( segmentos_min_d_prev[6] !== segmentos_min_d_expected_prev[6] )
		&& ((segmentos_min_d_expected_prev[6] !== last_segmentos_min_d_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_d[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_d_expected_prev);
		$display ("     Real value = %b", segmentos_min_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_min_d_exp[6] = segmentos_min_d_expected_prev[6];
	end
	if (
		( segmentos_min_u_expected_prev[0] !== 1'bx ) && ( segmentos_min_u_prev[0] !== segmentos_min_u_expected_prev[0] )
		&& ((segmentos_min_u_expected_prev[0] !== last_segmentos_min_u_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_u[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_u_expected_prev);
		$display ("     Real value = %b", segmentos_min_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_min_u_exp[0] = segmentos_min_u_expected_prev[0];
	end
	if (
		( segmentos_min_u_expected_prev[1] !== 1'bx ) && ( segmentos_min_u_prev[1] !== segmentos_min_u_expected_prev[1] )
		&& ((segmentos_min_u_expected_prev[1] !== last_segmentos_min_u_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_u[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_u_expected_prev);
		$display ("     Real value = %b", segmentos_min_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_min_u_exp[1] = segmentos_min_u_expected_prev[1];
	end
	if (
		( segmentos_min_u_expected_prev[2] !== 1'bx ) && ( segmentos_min_u_prev[2] !== segmentos_min_u_expected_prev[2] )
		&& ((segmentos_min_u_expected_prev[2] !== last_segmentos_min_u_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_u[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_u_expected_prev);
		$display ("     Real value = %b", segmentos_min_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_min_u_exp[2] = segmentos_min_u_expected_prev[2];
	end
	if (
		( segmentos_min_u_expected_prev[3] !== 1'bx ) && ( segmentos_min_u_prev[3] !== segmentos_min_u_expected_prev[3] )
		&& ((segmentos_min_u_expected_prev[3] !== last_segmentos_min_u_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_u[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_u_expected_prev);
		$display ("     Real value = %b", segmentos_min_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_min_u_exp[3] = segmentos_min_u_expected_prev[3];
	end
	if (
		( segmentos_min_u_expected_prev[4] !== 1'bx ) && ( segmentos_min_u_prev[4] !== segmentos_min_u_expected_prev[4] )
		&& ((segmentos_min_u_expected_prev[4] !== last_segmentos_min_u_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_u[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_u_expected_prev);
		$display ("     Real value = %b", segmentos_min_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_min_u_exp[4] = segmentos_min_u_expected_prev[4];
	end
	if (
		( segmentos_min_u_expected_prev[5] !== 1'bx ) && ( segmentos_min_u_prev[5] !== segmentos_min_u_expected_prev[5] )
		&& ((segmentos_min_u_expected_prev[5] !== last_segmentos_min_u_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_u[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_u_expected_prev);
		$display ("     Real value = %b", segmentos_min_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_min_u_exp[5] = segmentos_min_u_expected_prev[5];
	end
	if (
		( segmentos_min_u_expected_prev[6] !== 1'bx ) && ( segmentos_min_u_prev[6] !== segmentos_min_u_expected_prev[6] )
		&& ((segmentos_min_u_expected_prev[6] !== last_segmentos_min_u_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_min_u[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_min_u_expected_prev);
		$display ("     Real value = %b", segmentos_min_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_min_u_exp[6] = segmentos_min_u_expected_prev[6];
	end
	if (
		( segmentos_seg_d_expected_prev[0] !== 1'bx ) && ( segmentos_seg_d_prev[0] !== segmentos_seg_d_expected_prev[0] )
		&& ((segmentos_seg_d_expected_prev[0] !== last_segmentos_seg_d_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_d_expected_prev);
		$display ("     Real value = %b", segmentos_seg_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_seg_d_exp[0] = segmentos_seg_d_expected_prev[0];
	end
	if (
		( segmentos_seg_d_expected_prev[1] !== 1'bx ) && ( segmentos_seg_d_prev[1] !== segmentos_seg_d_expected_prev[1] )
		&& ((segmentos_seg_d_expected_prev[1] !== last_segmentos_seg_d_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_d_expected_prev);
		$display ("     Real value = %b", segmentos_seg_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_seg_d_exp[1] = segmentos_seg_d_expected_prev[1];
	end
	if (
		( segmentos_seg_d_expected_prev[2] !== 1'bx ) && ( segmentos_seg_d_prev[2] !== segmentos_seg_d_expected_prev[2] )
		&& ((segmentos_seg_d_expected_prev[2] !== last_segmentos_seg_d_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_d_expected_prev);
		$display ("     Real value = %b", segmentos_seg_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_seg_d_exp[2] = segmentos_seg_d_expected_prev[2];
	end
	if (
		( segmentos_seg_d_expected_prev[3] !== 1'bx ) && ( segmentos_seg_d_prev[3] !== segmentos_seg_d_expected_prev[3] )
		&& ((segmentos_seg_d_expected_prev[3] !== last_segmentos_seg_d_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_d_expected_prev);
		$display ("     Real value = %b", segmentos_seg_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_seg_d_exp[3] = segmentos_seg_d_expected_prev[3];
	end
	if (
		( segmentos_seg_d_expected_prev[4] !== 1'bx ) && ( segmentos_seg_d_prev[4] !== segmentos_seg_d_expected_prev[4] )
		&& ((segmentos_seg_d_expected_prev[4] !== last_segmentos_seg_d_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_d[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_d_expected_prev);
		$display ("     Real value = %b", segmentos_seg_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_seg_d_exp[4] = segmentos_seg_d_expected_prev[4];
	end
	if (
		( segmentos_seg_d_expected_prev[5] !== 1'bx ) && ( segmentos_seg_d_prev[5] !== segmentos_seg_d_expected_prev[5] )
		&& ((segmentos_seg_d_expected_prev[5] !== last_segmentos_seg_d_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_d[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_d_expected_prev);
		$display ("     Real value = %b", segmentos_seg_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_seg_d_exp[5] = segmentos_seg_d_expected_prev[5];
	end
	if (
		( segmentos_seg_d_expected_prev[6] !== 1'bx ) && ( segmentos_seg_d_prev[6] !== segmentos_seg_d_expected_prev[6] )
		&& ((segmentos_seg_d_expected_prev[6] !== last_segmentos_seg_d_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_d[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_d_expected_prev);
		$display ("     Real value = %b", segmentos_seg_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_seg_d_exp[6] = segmentos_seg_d_expected_prev[6];
	end
	if (
		( segmentos_seg_u_expected_prev[0] !== 1'bx ) && ( segmentos_seg_u_prev[0] !== segmentos_seg_u_expected_prev[0] )
		&& ((segmentos_seg_u_expected_prev[0] !== last_segmentos_seg_u_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_u[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_u_expected_prev);
		$display ("     Real value = %b", segmentos_seg_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmentos_seg_u_exp[0] = segmentos_seg_u_expected_prev[0];
	end
	if (
		( segmentos_seg_u_expected_prev[1] !== 1'bx ) && ( segmentos_seg_u_prev[1] !== segmentos_seg_u_expected_prev[1] )
		&& ((segmentos_seg_u_expected_prev[1] !== last_segmentos_seg_u_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_u[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_u_expected_prev);
		$display ("     Real value = %b", segmentos_seg_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmentos_seg_u_exp[1] = segmentos_seg_u_expected_prev[1];
	end
	if (
		( segmentos_seg_u_expected_prev[2] !== 1'bx ) && ( segmentos_seg_u_prev[2] !== segmentos_seg_u_expected_prev[2] )
		&& ((segmentos_seg_u_expected_prev[2] !== last_segmentos_seg_u_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_u[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_u_expected_prev);
		$display ("     Real value = %b", segmentos_seg_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmentos_seg_u_exp[2] = segmentos_seg_u_expected_prev[2];
	end
	if (
		( segmentos_seg_u_expected_prev[3] !== 1'bx ) && ( segmentos_seg_u_prev[3] !== segmentos_seg_u_expected_prev[3] )
		&& ((segmentos_seg_u_expected_prev[3] !== last_segmentos_seg_u_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_u[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_u_expected_prev);
		$display ("     Real value = %b", segmentos_seg_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmentos_seg_u_exp[3] = segmentos_seg_u_expected_prev[3];
	end
	if (
		( segmentos_seg_u_expected_prev[4] !== 1'bx ) && ( segmentos_seg_u_prev[4] !== segmentos_seg_u_expected_prev[4] )
		&& ((segmentos_seg_u_expected_prev[4] !== last_segmentos_seg_u_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_u[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_u_expected_prev);
		$display ("     Real value = %b", segmentos_seg_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmentos_seg_u_exp[4] = segmentos_seg_u_expected_prev[4];
	end
	if (
		( segmentos_seg_u_expected_prev[5] !== 1'bx ) && ( segmentos_seg_u_prev[5] !== segmentos_seg_u_expected_prev[5] )
		&& ((segmentos_seg_u_expected_prev[5] !== last_segmentos_seg_u_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_u[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_u_expected_prev);
		$display ("     Real value = %b", segmentos_seg_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmentos_seg_u_exp[5] = segmentos_seg_u_expected_prev[5];
	end
	if (
		( segmentos_seg_u_expected_prev[6] !== 1'bx ) && ( segmentos_seg_u_prev[6] !== segmentos_seg_u_expected_prev[6] )
		&& ((segmentos_seg_u_expected_prev[6] !== last_segmentos_seg_u_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_seg_u[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_seg_u_expected_prev);
		$display ("     Real value = %b", segmentos_seg_u_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segmentos_seg_u_exp[6] = segmentos_seg_u_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#160000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Timer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg nRst;
// wires                                               
wire [6:0] segmentos_hora_d;
wire [6:0] segmentos_hora_u;
wire [6:0] segmentos_min_d;
wire [6:0] segmentos_min_u;
wire [6:0] segmentos_seg_d;
wire [6:0] segmentos_seg_u;

wire sampler;                             

// assign statements (if any)                          
Timer i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.nRst(nRst),
	.segmentos_hora_d(segmentos_hora_d),
	.segmentos_hora_u(segmentos_hora_u),
	.segmentos_min_d(segmentos_min_d),
	.segmentos_min_u(segmentos_min_u),
	.segmentos_seg_d(segmentos_seg_d),
	.segmentos_seg_u(segmentos_seg_u)
);

// clk
always
begin
	clk = 1'b0;
	clk = #40000 1'b1;
	#40000;
end 

// nRst
initial
begin
	nRst = 1'b0;
end 

Timer_vlg_sample_tst tb_sample (
	.clk(clk),
	.nRst(nRst),
	.sampler_tx(sampler)
);

Timer_vlg_check_tst tb_out(
	.segmentos_hora_d(segmentos_hora_d),
	.segmentos_hora_u(segmentos_hora_u),
	.segmentos_min_d(segmentos_min_d),
	.segmentos_min_u(segmentos_min_u),
	.segmentos_seg_d(segmentos_seg_d),
	.segmentos_seg_u(segmentos_seg_u),
	.sampler_rx(sampler)
);
endmodule

